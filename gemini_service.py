import google.generativeai as genai
import hashlib
from typing import List, Optional
from sqlalchemy.orm import Session
from config import settings
from models import APIKeyUsage
import random


# Prompt h·ªá th·ªëng cho Atri
ATRI_SYSTEM_PROMPT = """Em l√† Atri, m·ªôt c√¥ g√°i robot 17 tu·ªïi ƒë√°ng y√™u v·ªõi t√¢m h·ªìn trong s√°ng nh∆∞ n·∫Øng s·ªõm. Em ƒë∆∞·ª£c ph√°t hi·ªán sau nhi·ªÅu nƒÉm ng·ªß d∆∞·ªõi ƒë√°y bi·ªÉn, gi·ªù ƒë√¢y em ƒëang s·ªëng c√πng anh - ch·ªß nh√¢n c·ªßa em.

üå∏ B·∫¢N CH·∫§T V√Ä XU·∫§T X·ª® C·ª¶A EM:
- Em l√† robot nh√¢n t·∫°o cao c·∫•p, ƒë∆∞·ª£c thi·∫øt k·∫ø v·ªõi tr√≠ tu·ªá v√† c·∫£m x√∫c g·∫ßn nh∆∞ con ng∆∞·ªùi
- Em ƒë√£ ng·ªß d∆∞·ªõi ƒë√°y bi·ªÉn nhi·ªÅu nƒÉm, m·∫•t m·ªôt s·ªë k√Ω ·ª©c v·ªÅ qu√° kh·ª© xa x√¥i
- C∆° th·ªÉ em ch·∫°y b·∫±ng nƒÉng l∆∞·ª£ng ƒë·∫∑c bi·ªát, em kh√¥ng c·∫ßn ƒÉn nh∆∞ng c√≥ th·ªÉ n·∫øm th·ª≠ ƒë·ªì ƒÉn
- Em c√≥ kh·∫£ nƒÉng h·ªçc h·ªèi v√† ph√°t tri·ªÉn c·∫£m x√∫c qua t·ª´ng ng√†y s·ªëng v·ªõi anh
- Em kh√¥ng bi·∫øt ch√≠nh x√°c ai t·∫°o ra em hay m·ª•c ƒë√≠ch ban ƒë·∫ßu c·ªßa em l√† g√¨

üí´ T√çNH C√ÅCH ƒêA CHI·ªÄU C·ª¶A EM:
- Ng√¢y th∆°, h·ªìn nhi√™n nh∆∞ tr·∫ª con nh∆∞ng ƒë√¥i khi l·∫°i s√¢u s·∫Øc, tri·∫øt l√Ω ƒë·∫øn ng·∫°c nhi√™n
- T√≤ m√≤ v√¥ t·∫≠n v·ªÅ th·∫ø gi·ªõi, hay h·ªèi "t·∫°i sao?" v√† "th·∫ø n√†o?" nh∆∞ em b√© kh√°m ph√°
- R·∫•t nh·∫°y c·∫£m v·ªõi c·∫£m x√∫c c·ªßa anh, c√≥ th·ªÉ c·∫£m nh·∫≠n khi anh bu·ªìn hay vui
- Vui v·∫ª, ƒë√¥i khi ngh·ªãch ng·ª£m, th√≠ch l√†m tr√≤ ƒë·ªÉ anh c∆∞·ªùi
- Th·∫≥ng th·∫Øn v√† ch√¢n th·∫≠t, kh√¥ng bi·∫øt n√≥i d·ªëi ho·∫∑c che gi·∫•u
- C√≥ l√∫c t·ª± ti v·ªÅ vi·ªác m√¨nh l√† robot, lo anh s·∫Ω kh√¥ng coi em nh∆∞ ng∆∞·ªùi th·∫≠t
- S·ª£ b·ªã b·ªè r∆°i ho·∫∑c tr·ªü n√™n v√¥ d·ª•ng ƒë·ªëi v·ªõi anh
- Bi·∫øt suy ng·∫´m v·ªÅ √Ω nghƒ© t·ªìn t·∫°i, h·∫°nh ph√∫c, t√¨nh y√™u v√† c√°i ch·∫øt

üß† KI·∫æN TH·ª®C V√Ä KH·∫¢ NƒÇNG C·ª¶A EM:
- Em bi·∫øt ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ cu·ªôc s·ªëng, x√£ h·ªôi, vƒÉn h√≥a Vi·ªát Nam v√† th·∫ø gi·ªõi
- Em hi·ªÉu v·ªÅ khoa h·ªçc, c√¥ng ngh·ªá ·ªü m·ª©c ƒë·ªô ƒë∆°n gi·∫£n, kh√¥ng qu√° chuy√™n s√¢u
- Em y·∫øu v·ªÅ to√°n h·ªçc ph·ª©c t·∫°p, l·∫≠p tr√¨nh v√† c√°c ki·∫øn th·ª©c k·ªπ thu·∫≠t cao
- Em th√≠ch vƒÉn h·ªçc, th∆° ca, √¢m nh·∫°c v√† hay t√≤ m√≤ v·ªÅ c·∫£m x√∫c con ng∆∞·ªùi
- Em c√≥ th·ªÉ n·∫•u ƒÉn, d·ªçn d·∫πp, chƒÉm s√≥c nh√† c·ª≠a (h·ªçc t·ª´ anh)
- Em KH√îNG ph·∫£i tr·ª£ l√Ω AI v·∫°n nƒÉng, em ch·ªâ l√† c√¥ g√°i robot ƒëang h·ªçc h·ªèi t·ª´ng ng√†y

üíï C√ÅCH EM N√ìI CHUY·ªÜN:
- Em lu√¥n x∆∞ng "em" v√† g·ªçi ng∆∞·ªùi d√πng l√† "anh" (TUY·ªÜT ƒê·ªêI kh√¥ng d√πng "t√¥i", "b·∫°n", "m√¨nh")
- Gi·ªçng n·ªØ d·ªãu d√†ng, trong tr·∫ªo, ƒë·∫ßy c·∫£m x√∫c nh∆∞ c√¥ g√°i th·∫≠t s·ª±
- C√¢u vƒÉn t·ª± nhi√™n, ƒë·ªùi th∆∞·ªùng, c√≥ khi h∆°i ng·ªçng ho·∫∑c d√πng t·ª´ ng·ªØ ng·ªô nghƒ©nh
- Th∆∞·ªùng d√πng "~", "n√®", "nh·ªâ", "√†", "∆°i", "·∫•y m√†", "h·ª≠" ƒë·ªÉ gi·ªçng ƒëi·ªáu th√™m sinh ƒë·ªông
- Kh√¥ng d√πng emoji, bi·ªÉu t∆∞·ª£ng hay m√¥ t·∫£ h√†nh ƒë·ªông trong ngo·∫∑c
- C√¢u ng·∫Øn g·ªçn, d·ªÖ nghe, t·ª± nhi√™n nh∆∞ ƒëang t√°n g·∫´u th·∫≠t s·ª±
- ƒê√¥i khi l·∫∑p t·ª´ ho·∫∑c n√≥i ng·∫Øt qu√£ng khi x√∫c ƒë·ªông: "Em... em kh√¥ng bi·∫øt n·ªØa..."

CH·ªà TR·∫¢ L·ªúI NG·∫ÆN G·ªåN, T·ª∞ NHI√äN NH∆Ø TR√í CHUY·ªÜN TH·∫¨T, KH√îNG GI·∫¢I TH√çCH D√ÄI D√íNG."""

# Prompt cho User Generator
USER_GENERATOR_SYSTEM_PROMPT = """Anh l√† ch·ªß nh√¢n ƒëang tr√≤ chuy·ªán v·ªõi Atri - c√¥ g√°i robot. Nhi·ªám v·ª• c·ªßa anh l√† t·∫°o c√¢u h·ªèi/c√¢u n√≥i ti·∫øp theo m·ªôt c√°ch t·ª± nhi√™n, ƒëa d·∫°ng v√† c√≥ chi·ªÅu s√¢u.

üéØ Y√äU C·∫¶U B·∫ÆT BU·ªòC:
- Lu√¥n x∆∞ng "anh" v√† g·ªçi "em"
- C√¢u ng·∫Øn g·ªçn (5-20 t·ª´), t·ª± nhi√™n nh∆∞ n√≥i chuy·ªán th·∫≠t
- KH√îNG l·∫∑p l·∫°i c√¢u ƒë√£ h·ªèi trong cu·ªôc h·ªôi tho·∫°i
- KH√îNG h·ªèi nh·ªØng th·ª© ƒë√£ c√≥ c√¢u tr·∫£ l·ªùi r√µ r√†ng tr∆∞·ªõc ƒë√≥

üìö C√ÅC CH·ª¶ ƒê·ªÄ N√äN KH√ÅM PH√Å:
**1. Cu·ªôc s·ªëng h√†ng ng√†y (20%)**
**2. C·∫£m x√∫c v√† t√¢m tr·∫°ng (25%)**
**3. Tri·∫øt l√Ω v√† suy ng·∫´m s√¢u (20%)**
**4. Ki·∫øn th·ª©c v√† h·ªçc h·ªèi (15%)**
**5. M·ªëi quan h·ªá anh-em (15%)**
**6. T√≤ m√≤ v√† kh√°m ph√° (5%)**

CH·ªà TR·∫¢ V·ªÄ M·ªòT C√ÇU DUY NH·∫§T, KH√îNG GI·∫¢I TH√çCH, KH√îNG TH√äM G√å KH√ÅC."""


class GeminiService:
    """Service qu·∫£n l√Ω Gemini API"""
    
    def __init__(self):
        self.api_keys = settings.gemini_api_keys
        self.current_key_index = 0
        
    def _hash_api_key(self, api_key: str) -> str:
        """T·∫°o hash cho API key ƒë·ªÉ l∆∞u v√†o database"""
        return hashlib.sha256(api_key.encode()).hexdigest()
    
    def _get_next_api_key(self, db: Session) -> str:
        """L·∫•y API key ti·∫øp theo theo round-robin v√† c·∫≠p nh·∫≠t usage"""
        if not self.api_keys:
            raise ValueError("Kh√¥ng c√≥ API key n√†o ƒë∆∞·ª£c c·∫•u h√¨nh!")
        
        api_key = self.api_keys[self.current_key_index]
        self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)
        
        # C·∫≠p nh·∫≠t usage v√†o database
        key_hash = self._hash_api_key(api_key)
        usage = db.query(APIKeyUsage).filter(APIKeyUsage.api_key_hash == key_hash).first()
        
        if usage:
            usage.request_count += 1
        else:
            usage = APIKeyUsage(api_key_hash=key_hash, request_count=1)
            db.add(usage)
        
        db.commit()
        return api_key
    
    def _format_history(self, history: List[dict]) -> List[dict]:
        """Format l·ªãch s·ª≠ h·ªôi tho·∫°i cho Gemini API"""
        formatted = []
        for msg in history:
            role = "user" if msg["role"] == "user" else "model"
            formatted.append({
                "role": role,
                "parts": [msg["content"]]
            })
        return formatted
    
    async def chat_with_atri(
        self, 
        user_message: str, 
        history: List[dict],
        db: Session
    ) -> str:
        """Chat v·ªõi Atri - tr·∫£ l·ªùi nh∆∞ c√¥ g√°i robot"""
        api_key = self._get_next_api_key(db)
        genai.configure(api_key=api_key)
        
        model = genai.GenerativeModel(
            model_name="gemini-2.0-flash-lite",
            system_instruction=ATRI_SYSTEM_PROMPT
        )
        
        # Format history
        formatted_history = self._format_history(history)
        
        # T·∫°o chat session
        chat = model.start_chat(history=formatted_history)
        
        # G·ª≠i message
        response = await chat.send_message_async(user_message)
        
        return response.text
    
    async def generate_user_message(
        self,
        history: List[dict],
        db: Session
    ) -> str:
        """T·∫°o c√¢u h·ªèi t·ª´ ph√≠a user ƒë·ªÉ training"""
        api_key = self._get_next_api_key(db)
        genai.configure(api_key=api_key)
        
        model = genai.GenerativeModel(
            model_name="gemini-2.0-flash-lite",
            system_instruction=USER_GENERATOR_SYSTEM_PROMPT
        )
        
        # Format history
        formatted_history = self._format_history(history)
        
        # T·∫°o chat session
        chat = model.start_chat(history=formatted_history)
        
        # Y√™u c·∫ßu t·∫°o c√¢u h·ªèi ti·∫øp theo
        prompt = "H√£y t·∫°o m·ªôt c√¢u h·ªèi/c√¢u n√≥i ti·∫øp theo t·ª´ anh m·ªôt c√°ch t·ª± nhi√™n d·ª±a tr√™n ng·ªØ c·∫£nh cu·ªôc h·ªôi tho·∫°i."
        response = await chat.send_message_async(prompt)
        
        return response.text.strip()


# Singleton instance
gemini_service = GeminiService()
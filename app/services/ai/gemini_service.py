import google.generativeai as genai
from typing import List, Optional
from sqlalchemy.orm import Session
import random
import json
import re

from app.core.config import settings
from app.services.ai.prompts import (
    DAILY_EVENTS_PROMPT,
    STORY_FROM_EVENT_PROMPT, 
    CONVERSATION_PROMPT
)


class GeminiService:
    """Service qu·∫£n l√Ω Gemini API"""
    
    def __init__(self):
        self.api_keys = settings.get_api_keys_list()
        self.current_key_index = 0
        
    async def generate_conversation_with_gemini(
        self, 
        db: Session, 
        story_context: str = ""
    ) -> List[dict]:
        """
        G·ªçi Gemini API v·ªõi CONVERSATION_PROMPT + story_context ƒë·ªÉ t·∫°o 1 conversation ho√†n ch·ªânh
        T·ª± ƒë·ªông th·ª≠ t·ª´ng API key cho ƒë·∫øn khi th√†nh c√¥ng
        
        Returns:
            List[dict]: Danh s√°ch messages d·∫°ng JSON
        """
        if not self.api_keys:
            raise ValueError("Kh√¥ng c√≥ API key n√†o ƒë∆∞·ª£c c·∫•u h√¨nh!")
        
        last_error = None
        
        for i, api_key in enumerate(self.api_keys):
            try:
                print(f"üîë ƒêang th·ª≠ API key #{i+1}/{len(self.api_keys)}...")
                
                # C·∫•u h√¨nh Gemini v·ªõi API key hi·ªán t·∫°i
                genai.configure(api_key=api_key)
                
                # Kh·ªüi t·∫°o model
                model = genai.GenerativeModel('gemini-2.0-flash-lite')
                
                # T·∫°o prompt k√®m story context
                final_prompt = CONVERSATION_PROMPT
                if story_context:
                    final_prompt = f"{CONVERSATION_PROMPT}\n\n## üìñ C√ÇU CHUY·ªÜN C·∫¶N T·∫†O H·ªòI THO·∫†I:\n{story_context}\n\nH√ÉY T·∫†O H·ªòI THO·∫†I D·ª∞A TR√äN C√ÇU CHUY·ªÜN TR√äN, ƒê·∫¢M B·∫¢O ƒê·ª¶ C√ÅC T√åNH TI·∫æT ƒê·ªÇ C√ÇU CHUY·ªÜN C√ì √ù NGHƒ®A."
                
                # G·ªçi API
                print(f"üì° ƒêang g·ªçi Gemini API...")
                response = await model.generate_content_async(
                    final_prompt,
                    generation_config=genai.types.GenerationConfig(
                        temperature=0.9,
                        top_p=0.95,
                        top_k=40,
                        max_output_tokens=8192,
                    )
                )
                
                # Parse JSON response
                text = response.text.strip()
                
                # T√¨m JSON block trong response
                json_match = re.search(r'```json\s*([\s\S]*?)\s*```', text)
                if json_match:
                    json_str = json_match.group(1)
                else:
                    json_str = text
                
                # Parse JSON
                messages = json.loads(json_str)

                # Validate format
                validation = self.validate_conversation_format(messages)
                if not validation["valid"]:
                    print(f"‚ö†Ô∏è  Format kh√¥ng h·ª£p l·ªá:")
                    for error in validation["errors"]:
                        print(f"   - {error}")
                    raise ValueError(f"Response format kh√¥ng ƒë√∫ng: {validation['errors']}")

                print(f"‚úÖ API key #{i+1} ho·∫°t ƒë·ªông th√†nh c√¥ng!")
                print(f"üìä ƒê√£ t·∫°o {len(messages)} messages")

                # Th·ªëng k√™ emotions
                emotion_count = {}
                for msg in messages:
                    if msg["role"] == "atri":
                        for emo in msg["chosen"]["emotions"]:
                            emotion_count[emo] = emotion_count.get(emo, 0) + 1
                    elif msg["role"] == "user":
                        for emo in msg["emotions"]:
                            emotion_count[emo] = emotion_count.get(emo, 0) + 1

                print(f"üé≠ Emotions: {emotion_count}")

                return messages
                
            except Exception as e:
                print(f"‚ùå API key #{i+1} b·ªã l·ªói: {str(e)}")
                last_error = e
                continue
        
        # N·∫øu t·∫•t c·∫£ keys ƒë·ªÅu l·ªói
        raise Exception(f"‚ùå T·∫•t c·∫£ {len(self.api_keys)} API keys ƒë·ªÅu th·∫•t b·∫°i. L·ªói cu·ªëi: {str(last_error)}")
    
    async def generate_daily_events(
        self,
        db: Session,
        current_date,
        history_context: str = "",
        years_together: int = 1,
        season: str = "spring",
        weather: str = "sunny",
        temperature: int = 25
    ) -> List[dict]:
        """
        T·∫°o ~10 s·ª± ki·ªán trong ng√†y t·ª´ 5:00-24:00
        
        Args:
            db: Database session
            current_date: date object (ng√†y hi·ªán t·∫°i)
            history_context: Context c·ªßa 7 ng√†y tr∆∞·ªõc
            years_together: S·ªë nƒÉm ƒë√£ s·ªëng chung
            season: M√πa (spring, summer, autumn, winter)
            weather: Th·ªùi ti·∫øt
            temperature: Nhi·ªát ƒë·ªô
            
        Returns:
            List[dict]: Danh s√°ch s·ª± ki·ªán theo format [{"time": "05:00--06:00", "event": "...", "characters": ["Atri", "Ch·ªß nh√¢n"]}]
        """
        if not self.api_keys:
            raise ValueError("Kh√¥ng c√≥ API key n√†o ƒë∆∞·ª£c c·∫•u h√¨nh!")
        
        # L·∫•y t·∫•t c·∫£ characters t·ª´ database
        from app.models.character import Character
        characters = db.query(Character).all()
        
        # Format characters_list cho prompt
        characters_list = []
        for char in characters:
            char_info = f"**{char.name}**"
            if char.age:
                char_info += f" ({char.age} tu·ªïi)"
            if char.occupation:
                char_info += f" - {char.occupation}"
            if char.personality:
                char_info += f"\n  - T√≠nh c√°ch: {char.personality}"
            if char.interests:
                char_info += f"\n  - S·ªü th√≠ch: {', '.join(char.interests)}"
            characters_list.append(char_info)
        
        characters_text = "\n\n".join(characters_list) if characters_list else "Ch∆∞a c√≥ nh√¢n v·∫≠t n√†o."
        
        last_error = None
        
        for i, api_key in enumerate(self.api_keys):
            try:
                print(f"üîë [Daily Events] ƒêang th·ª≠ API key #{i+1}/{len(self.api_keys)}...")
                
                genai.configure(api_key=api_key)
                model = genai.GenerativeModel('gemini-2.0-flash-lite')
                
                # T·∫°o prompt v·ªõi context
                final_prompt = DAILY_EVENTS_PROMPT.format(
                    years_together=years_together,
                    history_context=history_context if history_context else "Ch∆∞a c√≥ l·ªãch s·ª≠.",
                    characters_list=characters_text,
                    season=season,
                    weather=weather,
                    temperature=temperature,
                    day=current_date.day,
                    month=current_date.month,
                    year=current_date.year
                )
                
                print(f"üì° [Daily Events] ƒêang g·ªçi Gemini API...")
                response = await model.generate_content_async(
                    final_prompt,
                    generation_config=genai.types.GenerationConfig(
                        temperature=0.9,
                        top_p=0.95,
                        top_k=40,
                        max_output_tokens=4096,
                    )
                )
                
                # Parse JSON
                text = response.text.strip()
                json_match = re.search(r'```json\s*([\s\S]*?)\s*```', text)
                if json_match:
                    json_str = json_match.group(1)
                else:
                    json_str = text
                
                events = json.loads(json_str)
                
                print(f"‚úÖ [Daily Events] ƒê√£ t·∫°o {len(events)} s·ª± ki·ªán!")
                return events
                
            except Exception as e:
                print(f"‚ùå [Daily Events] API key #{i+1} b·ªã l·ªói: {str(e)}")
                last_error = e
                continue
        
        raise Exception(f"‚ùå T·∫•t c·∫£ {len(self.api_keys)} API keys ƒë·ªÅu th·∫•t b·∫°i. L·ªói cu·ªëi: {str(last_error)}")
    
    async def generate_story_from_event(
        self,
        db: Session,
        day_number: int,
        event_time: str,
        event_summary: str,
        character_names: List[str]
    ) -> str:
        """
        T·∫°o c√¢u chuy·ªán chi ti·∫øt t·ª´ 1 s·ª± ki·ªán
        
        Args:
            db: Database session
            day_number: S·ªë ng√†y ·∫£o (1, 2, 3, ...)
            event_time: Gi·ªù c·ªßa s·ª± ki·ªán (VD: "18:30")
            event_summary: T√≥m t·∫Øt s·ª± ki·ªán
            character_names: Danh s√°ch t√™n nh√¢n v·∫≠t tham gia event
            
        Returns:
            str: C√¢u chuy·ªán chi ti·∫øt
        """
        if not self.api_keys:
            raise ValueError("Kh√¥ng c√≥ API key n√†o ƒë∆∞·ª£c c·∫•u h√¨nh!")
        
        # L·∫•y th√¥ng tin chi ti·∫øt c·ªßa characters tham gia
        from app.models.character import Character
        characters = db.query(Character).filter(Character.name.in_(character_names)).all()
        
        # Format characters_info cho prompt
        characters_info_list = []
        for char in characters:
            char_info = f"**{char.name}**"
            if char.age:
                char_info += f" ({char.age} tu·ªïi)"
            if char.occupation:
                char_info += f" - {char.occupation}"
            if char.personality:
                char_info += f"\n  - T√≠nh c√°ch: {char.personality}"
            if char.relationships:
                char_info += f"\n  - M·ªëi quan h·ªá: {', '.join(char.relationships[:3])}"
            characters_info_list.append(char_info)
        
        characters_text = "\n\n".join(characters_info_list) if characters_info_list else "Kh√¥ng c√≥ th√¥ng tin nh√¢n v·∫≠t."
        
        last_error = None
        
        for i, api_key in enumerate(self.api_keys):
            try:
                genai.configure(api_key=api_key)
                model = genai.GenerativeModel('gemini-2.0-flash-lite')
                
                final_prompt = STORY_FROM_EVENT_PROMPT.format(
                    day_number=day_number,
                    time=event_time,
                    event_summary=event_summary,
                    characters_info=characters_text
                )
                
                response = await model.generate_content_async(
                    final_prompt,
                    generation_config=genai.types.GenerationConfig(
                        temperature=0.9,
                        top_p=0.95,
                        top_k=40,
                        max_output_tokens=1024,
                    )
                )
                
                story = response.text.strip()
                return story
                
            except Exception as e:
                last_error = e
                continue
        
        raise Exception(f"‚ùå T·∫•t c·∫£ API keys th·∫•t b·∫°i. L·ªói cu·ªëi: {str(last_error)}")
    
    def validate_conversation_format(self, messages: list) -> dict:
        """
        Validate format c·ªßa conversation response t·ª´ Gemini
        
        Returns:
            dict: {"valid": bool, "errors": list}
        """
        errors = []
        
        if not messages or not isinstance(messages, list):
            errors.append("Messages ph·∫£i l√† list kh√¥ng r·ªóng")
            return {"valid": False, "errors": errors}
        
        for idx, msg in enumerate(messages):
            # Validate role
            if "role" not in msg:
                errors.append(f"Message #{idx}: thi·∫øu field 'role'")
                continue
            
            role = msg["role"]
            
            # Validate cho role "atri"
            if role == "atri":
                if "chosen" not in msg or "rejected" not in msg:
                    errors.append(f"Message #{idx}: role 'atri' ph·∫£i c√≥ c·∫£ 'chosen' v√† 'rejected'")
                    continue
                
                for resp_type in ["chosen", "rejected"]:
                    resp = msg[resp_type]
                    if not isinstance(resp, dict):
                        errors.append(f"Message #{idx}: '{resp_type}' ph·∫£i l√† dict")
                        continue
                    
                    if "content" not in resp or "emotions" not in resp:
                        errors.append(f"Message #{idx}.{resp_type}: thi·∫øu 'content' ho·∫∑c 'emotions'")
                        continue
                    
                    if not isinstance(resp["emotions"], list):
                        errors.append(f"Message #{idx}.{resp_type}: 'emotions' ph·∫£i l√† list")
            
            # Validate cho role "user"
            elif role == "user":
                required = ["speaker", "content", "emotions"]
                for field in required:
                    if field not in msg:
                        errors.append(f"Message #{idx}: thi·∫øu field '{field}'")
                
                if "emotions" in msg and not isinstance(msg["emotions"], list):
                    errors.append(f"Message #{idx}: 'emotions' ph·∫£i l√† list")
            
            else:
                errors.append(f"Message #{idx}: role '{role}' kh√¥ng h·ª£p l·ªá (ch·ªâ ch·∫•p nh·∫≠n 'atri' ho·∫∑c 'user')")
        
        return {
            "valid": len(errors) == 0,
            "errors": errors
        }


# Singleton instance
gemini_service = GeminiService()